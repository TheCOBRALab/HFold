# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 2. <macOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install build tools (macOS only)
      if: matrix.os == 'macos-latest'
      run: brew install cmake coreutils
      

    - name: Install ViennaRNA
      run: |
        curl -L -O https://github.com/ViennaRNA/ViennaRNA/releases/download/v2.7.0/ViennaRNA-2.7.0.tar.gz
        tar -xzf ViennaRNA-2.7.0.tar.gz
        cd ViennaRNA-2.7.0
        ./configure --without-perl
        CORES=$(nproc || sysctl -n hw.ncpu)
        sudo make -j$CORES
        sudo make install -j$CORES


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_C_FLAGS="-DHAVE_STRDUP=1"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      run: ctest --output-on-failure
